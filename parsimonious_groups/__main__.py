from sage.all_cmdline import gap

from .chords import no_of_types
from .parallel_subgroup import all_transpositions_in_gens
from .parsimonious_group import all_transformations
from .transposition_subgroup import possible_gens_for_R

gap.eval('LoadPackage("sonata")')
C12 = gap.CyclicGroup(gap.IsPermGroup, 12)


if __name__ == "__main__":
    for n in range(2, 12):
        print(f"Transformation Semigroup on the set of all tertian {n}-chords")
        gens = all_transformations(n)
        # transformation group on the set of all tertian n chords
        G = gap.Group([gap.AsPermutation(gen) for gen in gens])
        t = no_of_types(n)

        P = gap.Group(
            [gap.AsPermutation(trans) for trans in all_transpositions_in_gens(n, gens)]
        )
        print(f"Checking P is isomorphic to S_{t}...")
        assert gap.IsIsomorphicGroup(P, gap.SymmetricGroup(t))

        # Prove that C12^(t-1) is isomorphic to R
        Q = [gap.AsPermutation(trans) for trans in possible_gens_for_R(t)]
        print("Checking Q is a subset of G...")
        assert gap.IsSubset(G, Q)
        group_generated_by_Q = gap.Group(Q)
        assert gap.Size(group_generated_by_Q) == 12 ** (t - 1)
        print(f"Checking the group generated by Q is isomorphic to C_12^{t-1}...")
        assert gap.IsIsomorphicGroup(
            group_generated_by_Q, gap.DirectProduct(*[C12] * (t - 1))
        )
        # => group_generated_by_Q is isomorphic to R
        # => C12^(t-1) is isomorphic to R
